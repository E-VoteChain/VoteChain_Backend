generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}

model State {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  districts  District[]
  created_at DateTime   @default(now())
}

model District {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  state_id   String   @db.ObjectId
  State      State    @relation(fields: [state_id], references: [id], onDelete: Cascade)
  mandals    Mandal[]
  created_at DateTime @default(now())
}

model Mandal {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  district_id    String         @db.ObjectId
  District       District       @relation(fields: [district_id], references: [id], onDelete: Cascade)
  constituencies Constituency[]
  created_at     DateTime       @default(now())
}

model Constituency {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  slug       String     @unique
  created_at DateTime   @default(now())
  Election   Election[]
  Mandal     Mandal?    @relation(fields: [mandal_id], references: [id])
  mandal_id  String?    @db.ObjectId
}

model Election {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  purpose     String
  start_date  DateTime
  end_date    DateTime
  state       String
  status      Int      @default(0)
  total_votes Int      @default(0)

  constituency_id String       @db.ObjectId
  Constituency    Constituency @relation(fields: [constituency_id], references: [id], onDelete: Cascade)
  candidates      Candidate[]
  voters          User[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Party {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  abbreviation      String
  leader_name       String
  symbol_url        String
  is_national_party Boolean @default(false)

  candidates Candidate[]
  created_at DateTime    @default(now())
}

model Candidate {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slogan      String?
  election_id String  @db.ObjectId
  party_id    String? @db.ObjectId

  Election Election @relation(fields: [election_id], references: [id], onDelete: Cascade)
  Party    Party?   @relation(fields: [party_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model User {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  wallet_address String  @unique
  first_name     String?
  last_name      String?
  email          String? @unique
  phone_number   Int?    @unique
  is_verified    Boolean @default(false)
  has_voted      Boolean @default(false)
  election_id    String? @db.ObjectId
  role           Role    @default(USER)
  status         Status  @default(PENDING)

  Election Election? @relation(fields: [election_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Vote {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  voter_address String
  election_id   String @db.ObjectId
  candidate_id  String @db.ObjectId

  created_at DateTime @default(now())
}
