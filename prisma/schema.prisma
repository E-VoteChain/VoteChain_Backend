generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
  PHEAD
}

enum Status {
  PENDING
  APPROVED
  REJECTED
  INCOMPLETE
}

enum ElectionStatus {
  UPCOMING
  ONGOING
  COMPLETED
}

enum ElectionLevel {
  STATE
  DISTRICT
  MANDAL
  CONSTITUENCY
}

enum ElectionType {
  LOK_SABHA
  VIDHAN_SABHA
  MUNICIPAL
  PANCHAYAT
  BY_ELECTION
}

enum ElectionResult {
  PENDING
  WIN
  LOSE
}

enum TokenStatus {
  ACTIVE
  USED
  EXPIRED
}

model State {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  districts     District[]
  userLocations UserLocation[]

  @@index([name], name: "state_name")
  @@map("states")
}

model District {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  stateId String   @db.ObjectId
  state   State    @relation(fields: [stateId], references: [id])
  mandals Mandal[]

  @@index([name], name: "district_name")
  @@index([stateId], name: "district_state_id")
  @@map("districts")
}

model Mandal {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  districtId     String         @db.ObjectId
  district       District       @relation(fields: [districtId], references: [id])
  constituencies Constituency[]

  @@index([name], name: "mandal_name")
  @@index([districtId], name: "mandal_district_id")
  @@map("mandals")
}

model Constituency {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  mandalId   String      @db.ObjectId
  mandal     Mandal      @relation(fields: [mandalId], references: [id])
  candidates Candidate[]
  elections  Election[]

  @@index([name], name: "constituency_name")
  @@index([mandalId], name: "constituency_mandal_id")
  @@map("constituencies")
}

model Party {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String    @unique
  symbol    String    @unique
  createdBy String?   @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  details      PartyDetails[] @relation("PartyToDetails")
  candidates   Candidate[]
  partyMembers PartyMember[]
  tokens       PartyToken[]
}

model PartyToken {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  token     String      @unique
  status    TokenStatus @default(ACTIVE)
  sentAt    DateTime?
  usedAt    DateTime?
  expiresAt DateTime?
  partyId   String      @db.ObjectId
  party     Party       @relation(fields: [partyId], references: [id])
  createdAt DateTime    @default(now())

  @@index([partyId], name: "party_token_party_id")
}

model PartyDetails {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  abbreviation  String
  logo          String
  description   String
  contact_email String   @unique
  contact_phone String   @unique
  website       String
  twitter_url   String?
  facebook_url  String?
  instagram_url String?
  founded_on    DateTime
  headquarters  String

  party_id String @unique @db.ObjectId
  party    Party  @relation("PartyToDetails", fields: [party_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model PartyMember {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @db.ObjectId
  partyId String @db.ObjectId
  role    Role   @default(USER)
  status  Status @default(PENDING)

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  party     Party    @relation(fields: [partyId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, partyId])
}

model User {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  walletAddress String @unique
  role          Role   @default(USER)
  status        Status @default(INCOMPLETE)

  userDetails  UserDetails[]
  userLocation UserLocation[]

  candidates   Candidate[]
  votes        Vote[]
  partyMembers PartyMember[]

  verifiedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model UserLocation {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  stateId        String @db.ObjectId
  districtId     String @db.ObjectId
  mandalId       String @db.ObjectId
  constituencyId String @db.ObjectId
  userId         String @unique @db.ObjectId

  user      User     @relation(fields: [userId], references: [id])
  state     State    @relation(fields: [stateId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([stateId], name: "user_location_state_id")
  @@index([districtId], name: "user_location_district_id")
  @@index([mandalId], name: "user_location_mandal_id")
  @@index([constituencyId], name: "user_location_constituency_id")
}

model UserDetails {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName      String
  lastName       String
  dob            DateTime
  email          String   @unique
  phoneNumber    String   @unique
  profileImage   String
  aadharImage    String
  aadharNumber   String   @unique
  rejectedReason String?
  rejectedFields String[] @default([])
  userId         String   @unique @db.ObjectId

  submittedAt DateTime  @default(now())
  approvedAt  DateTime?

  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Election {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  title          String         @unique
  purpose        String
  startDate      DateTime
  endDate        DateTime
  level          ElectionLevel  @default(CONSTITUENCY)
  electionType   ElectionType
  status         ElectionStatus
  resultDeclared Boolean        @default(false)
  constituencyId String         @db.ObjectId
  constituency   Constituency   @relation(fields: [constituencyId], references: [id])
  candidates     Candidate[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  votes     Vote[]
}

model Candidate {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  userId         String         @db.ObjectId
  partyId        String         @db.ObjectId
  description    String
  electionId     String         @db.ObjectId
  constituencyId String         @db.ObjectId
  status         ElectionResult @default(PENDING)

  user         User         @relation(fields: [userId], references: [id])
  party        Party        @relation(fields: [partyId], references: [id])
  election     Election     @relation(fields: [electionId], references: [id])
  constituency Constituency @relation(fields: [constituencyId], references: [id])
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  votes        Vote[]
}

model Vote {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    @db.ObjectId
  electionId  String    @db.ObjectId
  candidateId String    @db.ObjectId
  election    Election  @relation(fields: [electionId], references: [id])
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([userId, electionId])
}
