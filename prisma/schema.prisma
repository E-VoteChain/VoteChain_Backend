// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum Status {
  PENDING
  APPROVED
  REJECTED
  INCOMPLETE
}

enum Election_level {
  State
  District
  Mandal
  CONSTITUENCY
}

model State {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  District     District[]
  UserLocation UserLocation[]

  @@index([name], name: "state_name")
  @@map("states")
}

model District {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  state_id String   @db.ObjectId
  states   State    @relation(fields: [state_id], references: [id], onDelete: Cascade)
  Mandal   Mandal[]

  @@index([name], name: "district_name")
  @@index([state_id], name: "district_state_id")
  @@map("districts")
}

model Mandal {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  district_id  String         @db.ObjectId
  district     District       @relation(fields: [district_id], references: [id], onDelete: Cascade)
  Constituency Constituency[]

  @@index([name], name: "mandal_name")
  @@index([district_id], name: "mandal_district_id")
  @@map("mandals")
}

model Constituency {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  mandal_id String @db.ObjectId
  mandal    Mandal @relation(fields: [mandal_id], references: [id], onDelete: Cascade)

  @@index([name], name: "constituency_name")
  @@index([mandal_id], name: "constituency_mandal_id")
  @@map("constituencies")
}

model Election {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  purpose     String
  start_date  DateTime
  end_date    DateTime
  state       String
  status      Int            @default(0)
  total_votes Int            @default(0)
  level       Election_level
  target_id   String         @db.ObjectId

  candidates Candidate[]
  voters     User[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Party {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  abbreviation      String
  leader_name       String
  symbol_url        String
  is_national_party Boolean @default(false)

  candidates Candidate[]
  created_at DateTime    @default(now())
}

model Candidate {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slogan      String?
  election_id String  @db.ObjectId
  party_id    String? @db.ObjectId

  Election Election @relation(fields: [election_id], references: [id], onDelete: Cascade)
  Party    Party?   @relation(fields: [party_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model User {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  wallet_address String  @unique
  is_verified    Boolean @default(false)
  has_voted      Boolean @default(false)
  election_id    String? @db.ObjectId
  role           Role    @default(USER)
  status         Status  @default(INCOMPLETE)

  Election     Election?      @relation(fields: [election_id], references: [id], onDelete: Cascade)
  UserDetails  UserDetails[]
  UserLocation UserLocation[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model UserLocation {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  state_id        String @db.ObjectId
  district_id     String @db.ObjectId
  mandal_id       String @db.ObjectId
  constituency_id String @db.ObjectId
  user_id         String @unique @db.ObjectId

  User  User  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  State State @relation(fields: [state_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([state_id], name: "user_location_state_id")
  @@index([district_id], name: "user_location_district_id")
  @@index([mandal_id], name: "user_location_mandal_id")
  @@index([constituency_id], name: "user_location_constituency_id")
}

model UserDetails {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  first_name      String
  last_name       String
  email           String
  phone_number    String
  profile_image   String
  aadhar_image    String
  rejected_reason String?
  rejected_fields String[] @default([])
  user_id         String   @unique @db.ObjectId

  User       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())
}

model Vote {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  voter_address String
  election_id   String @db.ObjectId
  candidate_id  String @db.ObjectId

  created_at DateTime @default(now())
}
